{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPCh+QSzt4LJvWvBox9rkac",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Nehag-29/practice1/blob/main/%20Ass_2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lnhat_krEDRO",
        "outputId": "7c894c87-4fdc-43f8-8f95-d18c52b8a800"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[10, 20, 30, 40, 50, 60, 70, 80, 200, 300]\n",
            "[20, 40, 50, 60, 70, 80, 200, 300]\n",
            "[20, 40, 50, 60, 70, 80, 200, 300]\n",
            "[300, 200, 80, 70, 60, 50, 40, 20]\n"
          ]
        }
      ],
      "source": [
        "L=[10, 20, 30, 40, 50, 60, 70, 80]\n",
        "L.extend([200,300])\n",
        "print(L)\n",
        "L.remove(10)\n",
        "L.remove(30)\n",
        "print(L)\n",
        "L.sort()\n",
        "print(L)\n",
        "L.sort(reverse=True)\n",
        "print(L)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "scores=(45,89.5,76,45.4,89,92,58,45)\n",
        "print('highest score',max(scores))\n",
        "print('index',scores.index(max(scores)))\n",
        "print('lowest score',min(scores))\n",
        "print('frequency of min score',scores.count(min(scores)))\n",
        "rev_scores=list(reversed(scores))\n",
        "print(rev_scores)\n",
        "res=76 in scores\n",
        "print('is 76 present?',res)\n",
        "if res:\n",
        "  print('index',scores.index(76))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UeTJRKbrEXQy",
        "outputId": "2e84707a-cc9d-4e26-e633-ab1ef6b90b73"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "highest score 92\n",
            "index 5\n",
            "lowest score 45\n",
            "frequency of min score 2\n",
            "[45, 58, 92, 89, 45.4, 76, 89.5, 45]\n",
            "is 76 present? True\n",
            "index 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "L=list(random.sample(range(100,901),100))\n",
        "print(L)\n",
        "len(L)\n",
        "count_odd=count_even=count_prime=0\n",
        "for i in L:\n",
        "  is_prime=True\n",
        "  if i%2==0:\n",
        "    print('even no:',i)\n",
        "    count_even+=1\n",
        "  else:\n",
        "    print('odd no:',i)\n",
        "    count_odd+=1\n",
        "  for j in range(2,i//2+1):\n",
        "    if i%j==0:\n",
        "      is_prime=False\n",
        "      break\n",
        "  if is_prime:\n",
        "   print('prime no:',i)\n",
        "   count_prime+=1\n",
        "\n",
        "print('total odd',count_odd)\n",
        "print('total even',count_even)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PzR5pH4pEXWh",
        "outputId": "e0b489e5-595b-494b-8db8-e310fcfea98c"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[836, 106, 451, 504, 814, 852, 848, 439, 282, 103, 849, 769, 231, 594, 205, 345, 449, 850, 734, 166, 560, 207, 153, 580, 607, 785, 724, 367, 396, 675, 291, 253, 339, 488, 307, 326, 674, 319, 375, 670, 186, 889, 264, 315, 199, 510, 754, 210, 533, 688, 257, 148, 561, 693, 525, 726, 781, 173, 800, 463, 235, 151, 134, 515, 550, 258, 496, 433, 635, 494, 566, 334, 478, 301, 427, 518, 471, 201, 499, 841, 863, 834, 155, 729, 400, 359, 384, 778, 738, 686, 397, 280, 886, 443, 737, 477, 790, 197, 165, 158]\n",
            "even no: 836\n",
            "even no: 106\n",
            "odd no: 451\n",
            "even no: 504\n",
            "even no: 814\n",
            "even no: 852\n",
            "even no: 848\n",
            "odd no: 439\n",
            "prime no: 439\n",
            "even no: 282\n",
            "odd no: 103\n",
            "prime no: 103\n",
            "odd no: 849\n",
            "odd no: 769\n",
            "prime no: 769\n",
            "odd no: 231\n",
            "even no: 594\n",
            "odd no: 205\n",
            "odd no: 345\n",
            "odd no: 449\n",
            "prime no: 449\n",
            "even no: 850\n",
            "even no: 734\n",
            "even no: 166\n",
            "even no: 560\n",
            "odd no: 207\n",
            "odd no: 153\n",
            "even no: 580\n",
            "odd no: 607\n",
            "prime no: 607\n",
            "odd no: 785\n",
            "even no: 724\n",
            "odd no: 367\n",
            "prime no: 367\n",
            "even no: 396\n",
            "odd no: 675\n",
            "odd no: 291\n",
            "odd no: 253\n",
            "odd no: 339\n",
            "even no: 488\n",
            "odd no: 307\n",
            "prime no: 307\n",
            "even no: 326\n",
            "even no: 674\n",
            "odd no: 319\n",
            "odd no: 375\n",
            "even no: 670\n",
            "even no: 186\n",
            "odd no: 889\n",
            "even no: 264\n",
            "odd no: 315\n",
            "odd no: 199\n",
            "prime no: 199\n",
            "even no: 510\n",
            "even no: 754\n",
            "even no: 210\n",
            "odd no: 533\n",
            "even no: 688\n",
            "odd no: 257\n",
            "prime no: 257\n",
            "even no: 148\n",
            "odd no: 561\n",
            "odd no: 693\n",
            "odd no: 525\n",
            "even no: 726\n",
            "odd no: 781\n",
            "odd no: 173\n",
            "prime no: 173\n",
            "even no: 800\n",
            "odd no: 463\n",
            "prime no: 463\n",
            "odd no: 235\n",
            "odd no: 151\n",
            "prime no: 151\n",
            "even no: 134\n",
            "odd no: 515\n",
            "even no: 550\n",
            "even no: 258\n",
            "even no: 496\n",
            "odd no: 433\n",
            "prime no: 433\n",
            "odd no: 635\n",
            "even no: 494\n",
            "even no: 566\n",
            "even no: 334\n",
            "even no: 478\n",
            "odd no: 301\n",
            "odd no: 427\n",
            "even no: 518\n",
            "odd no: 471\n",
            "odd no: 201\n",
            "odd no: 499\n",
            "prime no: 499\n",
            "odd no: 841\n",
            "odd no: 863\n",
            "prime no: 863\n",
            "even no: 834\n",
            "odd no: 155\n",
            "odd no: 729\n",
            "even no: 400\n",
            "odd no: 359\n",
            "prime no: 359\n",
            "even no: 384\n",
            "even no: 778\n",
            "even no: 738\n",
            "even no: 686\n",
            "odd no: 397\n",
            "prime no: 397\n",
            "even no: 280\n",
            "even no: 886\n",
            "odd no: 443\n",
            "prime no: 443\n",
            "odd no: 737\n",
            "odd no: 477\n",
            "even no: 790\n",
            "odd no: 197\n",
            "prime no: 197\n",
            "odd no: 165\n",
            "even no: 158\n",
            "total odd 53\n",
            "total even 47\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "A={34,56,78,90}\n",
        "B={78,45,90,23}\n",
        "print(A|B)\n",
        "print('A union B',A.union(B))\n",
        "print(A&B)\n",
        "print('A intersection B',A.intersection(B))\n",
        "print(A-B)\n",
        "print('set A-B',A.difference(B))\n",
        "print(B-A)\n",
        "print('set B-A',B.difference(A))\n",
        "if A|B==B:\n",
        "  print('A is subset of B')\n",
        "else:\n",
        "  print('A is not a subset of B')\n",
        "x=int(input('enter score x '))\n",
        "for i in A:\n",
        "  flag=True\n",
        "  if x==i:\n",
        "    flag=False\n",
        "    A.remove(x)\n",
        "    print(A)\n",
        "    break\n",
        "if flag:\n",
        "  print(x,'is not present in set A')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fOxTNjP3G-wP",
        "outputId": "b7fff2ff-bcea-46c5-f690-a67c3e5c170a"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{34, 45, 78, 23, 56, 90}\n",
            "A union B {34, 45, 78, 23, 56, 90}\n",
            "{90, 78}\n",
            "A intersection B {90, 78}\n",
            "{56, 34}\n",
            "set A-B {56, 34}\n",
            "{45, 23}\n",
            "set B-A {45, 23}\n",
            "A is not a subset of B\n",
            "enter score x 34\n",
            "{56, 90, 78}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dict1={'name':'Neha','age':'19','salary':8000,'city':'Patiala'}\n",
        "dict1['location']=dict1.pop('city')\n",
        "dict1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AMc3fpATH9zg",
        "outputId": "098039ed-5948-4783-f11d-c4c0fd1ccac7"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'name': 'Saumya', 'age': '19', 'salary': 8000, 'location': 'Patiala'}"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dict1={'1':'A' ,'2':'B'}\n",
        "dict2={'2':'C', '3':'D'}\n",
        "#dict1|dict2\n",
        "dict1.update(dict2)\n",
        "print(dict1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VUgetKT3ICk1",
        "outputId": "36a7188e-e537-4b4d-9f8c-fd2f768598ce"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'1': 'A', '2': 'C', '3': 'D'}\n"
          ]
        }
      ]
    }
  ]
}